import traci
import tkinter as tk
from tkinter import simpledialog
import threading
import time
import random
import pandas as pd

# Initializations
sumoBinary = "sumo-gui"
sumoCmd = [sumoBinary, "-c", "osm.sumocfg"]
traci.start(sumoCmd)

root = tk.Tk()
root.title("Dynamic Route Simulation")

trip_edges = [("24242882#0", "15973619#6"), ("4611711", "-120675240#0")]  # Placeholder edges

running = False
exit_simulation = False

def load_dynamic_predictions():
    """Fetch predictions generated by inference.py and create routes."""
    try:
        df = pd.read_csv('Knowledge/prediction_results.csv', header=None)  # Load latest predictions
        from_edge = df.iloc[-1, 1]  # Replace index based on your prediction file structure
        to_edge = df.iloc[-1, 2]
        return from_edge, to_edge
    except Exception as e:
        print("Error reading predictions:", e)
        return None, None

def insert_vehicle():
    from_edge, to_edge = load_dynamic_predictions()
    if from_edge and to_edge:
        vehicle_id = f"vehicle_{traci.simulation.getTime()}"
        route_id = f"route_{vehicle_id}"
        try:
            traci.route.add(routeID=route_id, edges=[from_edge, to_edge])
            traci.vehicle.add(vehID=vehicle_id, routeID=route_id, typeID="red_passenger")
            print(f"Inserted vehicle {vehicle_id} from {from_edge} to {to_edge}")
        except traci.TraCIException as e:
            print(f"Error inserting vehicle {vehicle_id}: {e}")

def toggle_play_pause():
    global running
    running = not running
    play_pause_button.config(text="Pause" if running else "Play")

def stop_simulation():
    global exit_simulation
    exit_simulation = True

def run_simulation():
    step = 0
    while not exit_simulation:
        if running:
            traci.simulationStep()
            if step % 50 == 0:
                insert_vehicle()
            step += 1
            time.sleep(0.1)
        root.update()

    traci.close()

insert_button = tk.Button(root, text="Insert Vehicles", command=insert_vehicle)
insert_button.pack()
play_pause_button = tk.Button(root, text="Play", command=toggle_play_pause)
play_pause_button.pack()
stop_button = tk.Button(root, text="Stop Simulation", command=stop_simulation)
stop_button.pack()

simulation_thread = threading.Thread(target=run_simulation)
simulation_thread.start()

root.mainloop()
